    const ref = useRef(null);
    const rafRef = useRef(null);
  useEffect(() => {
    const el = ref.current;
    if (!el) return;

    const setPos = (x, y) => {
      el.style.setProperty("--Xpos", `${x}px`);
      el.style.setProperty("--Ypos", `${y}px`);
    };

    const onMove = (event) => {
      let x = 0, y = 0;

      // normalize pointer / mouse / touch
      if (event.type === "touchmove" || event.type === "touchstart") {
        const t = event.touches && event.touches[0];
        if (!t) return;
        x = t.pageX;
        y = t.pageY;
      } else {
        // pointermove and mousemove have clientX/clientY
        x = event.clientX ?? event.pageX;
        y = event.clientY ?? event.pageY;
      }

      // throttle with rAF
      if (rafRef.current) cancelAnimationFrame(rafRef.current);
      rafRef.current = requestAnimationFrame(() => setPos(x, y));
    };

    const supportsPointer = typeof window !== "undefined" && "onpointermove" in window;

    if (supportsPointer) {
      window.addEventListener("pointermove", onMove, { passive: true });
    } else {
      window.addEventListener("mousemove", onMove, { passive: true });
      window.addEventListener("touchmove", onMove, { passive: true });
    }

    return () => {
      if (supportsPointer) {
        window.removeEventListener("pointermove", onMove);
      } else {
        window.removeEventListener("mousemove", onMove);
        window.removeEventListener("touchmove", onMove);
      }
      if (rafRef.current) cancelAnimationFrame(rafRef.current);
    };
  }, []);
  