    const [previewUrl, setPreviewUrl] = useState<string | null>(null);
    const [isImageLoaded, setIsImageLoaded] = useState<boolean>(false);
    const [activeFilter, setActiveFilter] = useState<string>('None');

    const fileInputRef = useRef<HTMLInputElement>(null);
    const resetFilterBtnRef = useRef<HTMLButtonElement>(null);

    const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (!file) return;

        if (!file.type.startsWith('image/')) {
            alert('Please select an image file.');
            return;
        }

        if (previewUrl) {
            URL.revokeObjectURL(previewUrl);
        }

        const newUrl = URL.createObjectURL(file);
        setPreviewUrl(newUrl);
        setIsImageLoaded(false); 
    };

    const handleImageLoad = useCallback(() => {
        setIsImageLoaded(true);
        resetFilterBtnRef.current?.click();
    }, []);

    const handleResetFilters = useCallback(() => {
        console.log("Filters reset!");
        setActiveFilter('None');
    }, []);

    const handleChooseImageClick = () => {
        fileInputRef.current?.click();
    };
    
    useEffect(() => {
        // Cleanup object URL on component unmount
        return () => {
            if (previewUrl) {
                URL.revokeObjectURL(previewUrl);
            }
        };
    }, [previewUrl]);