
    const reducerDrag = useCallback( (state, action) => {
        switch(action.type){
            case 'onMouseUp': 
            return {...state, flagDrag : action.payload.drag}
            
            // navigation
            case "onMouseMove" :          
                if(!state.flagDrag) return {...state}      
                return {...state, position : {
                    x : action.payload.event.clientX - state.drag.x,
                    y : action.payload.event.clientY - state.drag.y
                } }

            case 'onMouseDown' :
                const rect =  NavigationRef.current.getBoundingClientRect();
                action.payload.event.preventDefault()
        
                return {...state, flagDrag : action.payload.flag  ,drag : {
                    x : action.payload.event.clientX - rect.left,
                    y : action.payload.event.clientY - rect.top
                }}
        
            // Dots
            case "onMouseUpDots" :
                return {...state, dragLocatoin : action.payload.drag }

            case "onMouseMoveDots" :
                if(!state.dragLocatoin) return {...state}      

                return {...state, location : {
                    x : action.payload.event.clientX - state.dragLocation.x,
                    y : action.payload.event.clientY - state.dragLocation.y
                } }
        
            case "onMouseDownDocts" :
                const rectDots =  DotsMenuRef.current.getBoundingClientRect();
                action.payload.event.preventDefault()

                return {...state, dragLocatoin : action.payload.flag, dragLocation : {
                    x : action.payload.event.clientX - rectDots.left,
                    y : action.payload.event.clientY - rectDots.top
                }}
        }
    } ,[NavigationRef, DotsMenuRef])
    

    const initaionDragStae = useMemo( () => ({
        // navigation
        drag : {x : 0, y : 0},
        position :  {x : 120, y : 500},
        flagDrag : false, 
        // dots
        dragLocation : {x : 0, y:0},
        location : {x : 122, y : 200},
        dragLocatoin : false
    }),[NavigationRef, DotsMenuRef])

    const [dragState, dispatchDrag] = useReducer(reducerDrag,initaionDragStae )

    const handlerMouseUp = useCallback( () => {
        dispatchDrag({type : "onMouseUp", payload : { drag :  false}}),
        dispatchDrag({type : "onMouseUpDots", payload : { drag :  false}}) 
    }, [DotsMenuRef, NavigationRef])

    const handlerMouseLeave = useCallback( () => {
        dispatchDrag({type : "onMouseUp", payload : { drag :  false}}),
        dispatchDrag({type : "onMouseUpDots", payload : { drag :  false}})
    }, [DotsMenuRef, NavigationRef])

    const handlerMouseMove = useCallback( (event) => {
        dispatchDrag({type : "onMouseMove", payload : {event : event}}),
        dispatchDrag({type : "onMouseMoveDots", payload : {event : event}})
    }, [DotsMenuRef, NavigationRef])

-------------------------------


    const handlerMouseDown = useCallback( (event) => {
       dispatchDrag({type : "onMouseDownDocts", payload : {event : event, flag : true}})
    }, [DotsMenuRef])
